{"version":3,"sources":["pages/cola/index.js","pages/cola/Cola.js","pages/wine/index.js","pages/wine/Wine.js","serviceWorker.js","index.js"],"names":["Cola","className","to","Component","Wine","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+VAGeA,E,iLCGX,OACE,yBAAKC,UAAU,aACb,0EACA,kBAAC,IAAD,CAAMC,GAAG,eAAT,qB,GALWC,aCFJC,E,iLCIX,OACE,yBAAKH,UAAU,aACb,wDACA,kBAAC,IAAD,CAAMC,GAAG,eAAT,2B,GALWC,aCQCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAD,KACE,yBAAKV,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOW,KAAK,cAAcC,UAAWb,IACrC,kBAAC,IAAD,CAAOY,KAAK,cAAcC,UAAWT,IACrC,kBAAC,IAAD,CAAUF,GAAG,mBAInBY,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a96d879.chunk.js","sourcesContent":["\nimport './Cola.css';\nimport Cola from  './Cola';\nexport default Cola;\n","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Cola extends Component {\n  render() {\n    return (\n      <div className=\"page-cola\">\n        <p>这个是可口可乐~</p>\n        <Link to=\"/drink/wine\">去酒</Link>\n      </div>\n    );\n  }\n}\n\nexport default Cola;\n","\nimport Wine from './Wine';\nexport default Wine;\n","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Wine extends Component {\n  render() {\n    return (\n      <div className=\"page-wine\">\n        <p>这个是酒~</p>\n        <Link to=\"/drink/cola\">去可乐</Link>\n      </div>\n    );\n  }\n}\n\nexport default Wine;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './index.css';\n// import App from './App';\nimport Cola from './pages/cola';\nimport Wine from './pages/wine';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <div className=\"container\">\n      <Switch>\n        <Route path=\"/drink/cola\" component={Cola} />\n        <Route path=\"/drink/wine\" component={Wine} />\n        <Redirect to=\"/drink/cola\" />\n      </Switch>\n    </div>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}